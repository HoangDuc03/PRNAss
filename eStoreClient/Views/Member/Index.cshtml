@using DataAccess.Dto
@{
    ViewData["Title"] = "Member Management";
    var members = ViewBag.Members as List<MemberDto>;
    var apiBaseUrl = "https://localhost:7289/api/Member/";
}

<h1>Member Management</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Create New Account</a>
</p>

@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @ViewBag.ErrorMessage
    </div>
}
else if (members != null && members.Any())
{
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Member ID</th>
                <th>Email</th>
                <th>Company Name</th>
                <th>City</th>
                <th>Country</th>
                <th>Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var member in members)
            {
                <tr id="member-row-@member.MemberId">
                    <td>@member.MemberId</td>
                    <td>@Html.DisplayFor(modelItem => member.Email)</td>
                    <td>@Html.DisplayFor(modelItem => member.CompanyName)</td>
                    <td>@Html.DisplayFor(modelItem => member.City)</td>
                    <td>@Html.DisplayFor(modelItem => member.Country)</td>
                    <td>@(member.Role == 2 ? "Admin" : "Member")</td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@member.MemberId" class="btn btn-sm btn-info">Edit</a> |
                        <button type="button" class="btn btn-sm btn-danger delete-btn"
                                data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal"
                                data-id="@member.MemberId" data-email="@member.Email">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info" role="alert">
        No members found.
    </div>
}

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete the member with email: <strong id="memberEmailToDelete"></strong>?
                This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const deleteConfirmationModal = document.getElementById('deleteConfirmationModal');
            let memberIdToDelete = null;

            // When the modal is about to be shown, update its content
            deleteConfirmationModal.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget; // Button that triggered the modal
                memberIdToDelete = button.getAttribute('data-id'); // Get member ID from data-id attribute
                const memberEmail = button.getAttribute('data-email'); // Get member email for display

                const modalBody = deleteConfirmationModal.querySelector('#memberEmailToDelete');
                modalBody.textContent = memberEmail;
            });

            // Handle the click on the final delete confirmation button
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            confirmDeleteBtn.addEventListener('click', function () {
                if (memberIdToDelete) {
                    const apiEndpoint = `@apiBaseUrl` + 'Delete?id=' + memberIdToDelete;

                    fetch(apiEndpoint, {
                        method: 'GET' // As per your API design
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        }
                        throw new Error('Network response was not ok.');
                    })
                    .then(data => {
                        if (data === true) {
                            // On successful deletion, reload the page to see the changes
                            location.reload();
                        } else {
                            alert('Failed to delete the member.');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while trying to delete the member.');
                    });
                }
            });
        });
    </script>
}

